version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=camera_db,mur_image_db
    volumes:
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - camera-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "15672:15672"  # Interface d'administration
      - "5672:5672"    # Port AMQP
    networks:
      - camera-network

  # CameraService
  camera-service:
    build:
      context: ./camera-service/CameraService
      dockerfile: Dockerfile
    container_name: camera-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - camera-network

  # MurImageService
  mur-image-service:
    build:
      context: ./mur-image-service/MurImageService
      dockerfile: Dockerfile
    container_name: mur-image-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - camera-network

  # Frontend Angular
  frontend:
    build:
      context: ./frontend-angular
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      - camera-service
      - mur-image-service
    networks:
      - camera-network
      
  # PostgreSQL Exporter - Collecte des métriques PostgreSQL
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres:5432/postgres?sslmode=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - camera-network
    restart: unless-stopped
      
  # Prometheus - Système de surveillance et collecte de métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - camera-service
      - mur-image-service
    networks:
      - camera-network
    restart: unless-stopped

  # Grafana - Visualisation des métriques
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - camera-network
    restart: unless-stopped

networks:
  camera-network:
    driver: bridge

volumes:
  postgres-data:
  rabbitmq-data:
  prometheus-data:
  grafana-data: